'use client';

import { useEffect, useRef } from 'react';

export default function AnimatedBackground() {
  const containerRef = useRef<HTMLDivElement>(null);
  const initializedRef = useRef(false);

  useEffect(() => {
    if (!containerRef.current || initializedRef.current) return;
    
    initializedRef.current = true;
    
    const container = containerRef.current;
    const numCircles = 150; // Reduced from 400 to improve performance
    const circles: Array<{
      element: HTMLDivElement;
      progress: number;
      speed: number;
    }> = [];

    // Create circles
    for (let i = 0; i < numCircles; i++) {
      const circle = document.createElement('div');
      circle.className = 'absolute rounded-full pointer-events-none';
      
      // Size: 3-6px
      const size = Math.random() * 3 + 3;
      const opacity = Math.random() * 0.4 + 0.3;
      
      circle.style.width = size + 'px';
      circle.style.height = size + 'px';
      
      // Glowing blue light bulb effect - exact same colors
      circle.style.backgroundColor = '#5aa5ff';
      circle.style.boxShadow = `0 0 ${size * 2}px ${size}px rgba(90, 165, 255, 0.6), 0 0 ${size * 4}px ${size * 2}px rgba(90, 165, 255, 0.4)`;
      circle.style.opacity = opacity.toString();
      
      // Use transform for better performance
      circle.style.transform = 'translate3d(0, 0, 0)';
      circle.style.willChange = 'transform';
      
      container.appendChild(circle);
      circles.push({
        element: circle,
        progress: Math.random(),
        speed: Math.random() * 0.3 + 0.7
      });
    }

    // Animation loop with throttling
    let time = 0;
    let animationId: number;
    let lastTime = 0;
    const targetFPS = 30; // Reduced from 60fps to 30fps for better performance
    const frameInterval = 1000 / targetFPS;

    function animate(currentTime: number) {
      if (currentTime - lastTime < frameInterval) {
        animationId = requestAnimationFrame(animate);
        return;
      }
      
      lastTime = currentTime;
      time += 0.02;
      
      circles.forEach((circle, i) => {
        // Exact logic from drawEndlessStream function
        const p = (i / numCircles + time * 0.05) % 1;
        const x = window.innerWidth * p;
        const y = window.innerHeight / 2 + Math.sin(p * 20 + time * 2 + i * 0.1) * 100;
        
        // Use transform3d for hardware acceleration
        circle.element.style.transform = `translate3d(${x}px, ${y}px, 0)`;
      });
      
      animationId = requestAnimationFrame(animate);
    }

    // Start animation immediately
    animate(0);

    // Cleanup function
    return () => {
      if (animationId) {
        cancelAnimationFrame(animationId);
      }
      // Remove all circles
      while (container.firstChild) {
        container.removeChild(container.firstChild);
      }
      initializedRef.current = false;
    };
  }, []); // Empty dependency array - runs once on mount

  return (
    <div className="pointer-events-none fixed inset-0 overflow-hidden z-0">
      <div ref={containerRef} className="absolute inset-0">
        {/* Circles will be generated by JavaScript */}
      </div>
    </div>
  );
}
